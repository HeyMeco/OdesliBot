stages:
  - build
  - test
  - release
  - deploy


image: docker:latest
services:
  - docker:dind

include:
  - template: Container-Scanning.gitlab-ci.yml


.job_template: &job_definition
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - export $(cat .env)

build:
  stage: build
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $IMAGE .
    - docker push $IMAGE
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
      - $CI_COMMIT_MESSAGE =~ /no-build/

release:
  stage: release
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  only:
    - master
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    PROD_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:latest
  script:
    - docker pull $IMAGE
    - docker tag $IMAGE $PROD_IMAGE
    - docker push $PROD_IMAGE
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
      - $CI_COMMIT_MESSAGE =~ /no-build/

deploy:
  <<: *job_definition
  stage: deploy
  environment:
    name: production
  script:
    - ssh -t -o "StrictHostKeyChecking no" $STAGING_USER@$STAGING_IP "cd tikbot; ./start.sh --update"
  only:
    - master
  dependencies:
    - build
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /no-deploy/